version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
  app:
    image: my-app:latest
    container_name: spring_app
    build:
      context: ../..
      dockerfile: docker/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - db
      - mongo
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/app_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres

  db:
    image: postgres:12.3
    container_name: postgres_db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: app_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data

  mongo:
    image: mongo:6.0.8
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INIT_ROOT_USERNAME: root
      MONGO_INIT_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: appdatabase

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"  # Только внутренний порт
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO, kafka.producer.async.DefaultEventHandler=INFO, state.change.logger=INFO"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092  # Уникальное имя для внутреннего подключения
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092  # Слушать на всех интерфейсах
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPIC_ENABLE: 'true'


volumes:
  postgres_data:
  mongo_data: